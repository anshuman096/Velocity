/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var velocity = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,13],$V2=[1,18],$V3=[1,25],$V4=[1,26],$V5=[1,24],$V6=[1,22],$V7=[1,23],$V8=[1,21],$V9=[5,15,16,23,24,26,89,91,92],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,38],$Vj=[1,36],$Vk=[1,37],$Vl=[5,15,16,23,24,25,26,89,91,92],$Vm=[5,15,16,23,24,26,30,31,41,55,56,67,70,72,73,74,75,76,79,81,82,83,84,85,86,87,89,91,92],$Vn=[5,15,16,23,24,26,30,31,55,56,67,70,72,73,74,75,76,79,81,82,83,84,85,86,87,89,91,92],$Vo=[1,65],$Vp=[1,82],$Vq=[1,76],$Vr=[1,81],$Vs=[1,86],$Vt=[1,87],$Vu=[30,31,55,56,67,70,72,73,74,75,76,79,81,82,83,84,85,86,87],$Vv=[2,96],$Vw=[1,128],$Vx=[1,132],$Vy=[26,28,73,89,91,92],$Vz=[1,145],$VA=[1,150],$VB=[31,55,56],$VC=[31,70],$VD=[26,73,89,91,92],$VE=[1,181],$VF=[1,193];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"statements":3,"statement":4,"EOF":5,"include_statement":6,"parse_statement":7,"break_statement":8,"stop_statement":9,"eval_statement":10,"define_statement":11,"set_statement":12,"if_statement":13,"foreach_statement":14,"HASH":15,"ID":16,"var":17,"string_stmt":18,"numeric_dotted":19,"spchar_clause":20,"single_comment":21,"multiline_comment":22,"SPECIAL_CHAR":23,"EXCLAIM":24,"PERIOD":25,"NUMBER":26,"INCLUDE":27,"LPAR":28,"include_tokens":29,"COMMA":30,"RPAR":31,"PARSE":32,"parse_tokens":33,"BREAK":34,"STOP":35,"EVALUATE":36,"eval_tokens":37,"DEFINE":38,"define_tokens":39,"SET":40,"ASSIGN":41,"arg_statement":42,"COMMENT_START":43,"SL_COMMENT":44,"ML_COMMENT":45,"ml_comment_line":46,"EOC":47,"object":48,"object_list_statement":49,"math_stmt":50,"map_stmt":51,"bool_statements":52,"bool_stmt":53,"logical_operator":54,"AND":55,"OR":56,"IF":57,"if_end_stmts":58,"ELSEIF":59,"elseif_stmts":60,"ELSE":61,"else_stmts":62,"END":63,"FOREACH":64,"foreach_condition":65,"foreach_end_stmts":66,"IN":67,"LSQUARE":68,"list_contents":69,"RSQUARE":70,"math_operator":71,"ADD":72,"SUBTRACT":73,"MUL":74,"DIV":75,"IDIV":76,"LCURLY":77,"key_value_stmts":78,"RCURLY":79,"key_value":80,"COLON":81,"EQUALTO":82,"NOTEQUAL":83,"GREATERTHAN":84,"LESSTHAN":85,"GREATERTHANEQUAL":86,"LESSTHANEQUAL":87,"number_clause":88,"SINGLEQUOTE":89,"STRING":90,"DOUBLEQUOTE":91,"VARBEGIN":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"HASH",16:"ID",23:"SPECIAL_CHAR",24:"EXCLAIM",25:"PERIOD",26:"NUMBER",27:"INCLUDE",28:"LPAR",30:"COMMA",31:"RPAR",32:"PARSE",34:"BREAK",35:"STOP",36:"EVALUATE",38:"DEFINE",40:"SET",41:"ASSIGN",43:"COMMENT_START",44:"SL_COMMENT",45:"ML_COMMENT",47:"EOC",55:"AND",56:"OR",57:"IF",59:"ELSEIF",61:"ELSE",63:"END",64:"FOREACH",67:"IN",68:"LSQUARE",70:"RSQUARE",72:"ADD",73:"SUBTRACT",74:"MUL",75:"DIV",76:"IDIV",77:"LCURLY",79:"RCURLY",81:"COLON",82:"EQUALTO",83:"NOTEQUAL",84:"GREATERTHAN",85:"LESSTHAN",86:"GREATERTHANEQUAL",87:"LESSTHANEQUAL",89:"SINGLEQUOTE",90:"STRING",91:"DOUBLEQUOTE",92:"VARBEGIN"},
productions_: [0,[3,2],[3,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[20,1],[20,1],[19,3],[19,1],[6,4],[29,3],[29,3],[29,2],[29,2],[29,1],[7,4],[33,2],[33,2],[8,2],[9,2],[10,4],[37,2],[11,4],[39,2],[12,7],[21,3],[22,4],[46,2],[46,1],[42,1],[42,1],[42,1],[42,1],[52,3],[52,1],[54,1],[54,1],[13,6],[58,2],[58,6],[58,3],[58,2],[60,2],[60,6],[60,3],[60,2],[62,2],[62,2],[14,6],[66,2],[66,2],[65,3],[65,3],[49,3],[49,2],[69,3],[69,4],[69,1],[50,3],[71,1],[71,1],[71,1],[71,1],[71,1],[51,3],[78,3],[78,1],[80,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[48,1],[48,1],[48,1],[88,2],[88,1],[18,3],[18,3],[18,2],[17,2],[17,4],[17,7],[17,3],[17,4],[17,6],[17,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:

            return symTable; 
        
break;
case 22:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 39:

            this.$ = $$[$0-3] + '=' + $$[$0-1];
            handleAssignment($$[$0-3], $$[$0-1]);
        
break;
case 45:
 
            var myListInStr = this.$;
            this.$ = myListInStr.substring(1,myListInStr.length-1).split(",");
            
        
break;
case 66: case 67:

            addVariable($$[$0-2]);
            addVariable($$[$0]);
            handleAssignment($$[$0-2], $$[$0]);
        
break;
case 68: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91:

            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
        
break;
case 69:

            this.$ = $$[$0-1] + $$[$0];
        
break;
case 70:

            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
            //Adding list content
        
break;
case 71:

            this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] +$$[$0];
        
break;
case 72:

            //addVariable($$[$0]); 
        
break;
case 73:

            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 94:
 
            addNumber($$[$0]); 
        
break;
case 95:

		this.$ = $$[$0-1] + $$[$0];
         
break;
case 97: case 98:

            this.$ = $$[$0-1];
            addString($$[$0-1]);
        
break;
case 99:

            this.$ = $$[$0-1] + $$[$0];
            addString(this.$);
        
break;
case 100:

            this.$ = $$[$0-1] + $$[$0];
            addVariable(this.$);
        
break;
case 101:

            this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
            addVariable(this.$);
        
break;
case 102:

            this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3];
            addVariable(this.$);
        
break;
case 103:

            this.$ = $$[$0-2] + $$[$0];
            addVariable(this.$);
        
break;
case 104:

            this.$ = $$[$0-3] + $$[$0-1];
            addVariable(this.$);
        
break;
case 105:

            this.$ = $$[$0-5] + $$[$0-3] + $$[$0-2] + $$[$0-1];
            addVariable(this.$);
        
break;
case 106:

            this.$ = $$[$0-4] + $$[$0-1];
            addVariable(this.$);
        
break;
}
},
table: [{3:1,4:2,5:$V0,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,89:$V6,91:$V7,92:$V8},{1:[3]},{3:27,4:2,5:$V0,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,89:$V6,91:$V7,92:$V8},{1:[2,2]},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),{16:$Va,27:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,38:$Vg,40:$Vh,43:$Vi,57:$Vj,64:$Vk},o($V9,[2,13]),o($V9,[2,14]),o($V9,[2,15],{25:[1,39]}),o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,18]),o($V9,[2,19]),{16:[1,40],24:[1,41],77:[1,42]},{90:[1,43]},{90:[1,44],91:[1,45]},o($Vl,[2,23]),o($V9,[2,20]),o($V9,[2,21]),{1:[2,1]},o($V9,[2,12]),{28:[1,46]},{28:[1,47]},o($V9,[2,33]),o($V9,[2,34]),{28:[1,48]},{28:[1,49]},{28:[1,50]},{28:[1,51]},{28:[1,52]},{44:[1,53],45:[1,54]},{26:[1,55]},o($Vm,[2,100],{25:[1,56]}),{16:[1,57],77:[1,58]},{16:[1,59]},{89:[1,60]},{91:[1,61]},o($Vn,[2,99]),{17:63,18:64,29:62,31:$Vo,89:$V6,91:$V7,92:$V8},{17:67,18:68,33:66,89:$V6,91:$V7,92:$V8},{17:70,37:69,92:$V8},{17:72,39:71,92:$V8},{17:73,92:$V8},{17:78,18:79,26:$Vp,28:$Vq,48:77,52:74,53:75,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:84,65:83,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},o($V9,[2,40]),{45:$Vs,46:85,47:$Vt},o($Vl,[2,22]),{16:[1,88]},o($Vm,[2,103]),{16:[1,89]},{25:[1,91],79:[1,90]},o($Vn,[2,97]),o($Vn,[2,98]),o($V9,[2,24]),{30:[1,92],31:[1,93]},{30:[1,94],31:[1,95]},o($V9,[2,29]),o($V9,[2,30]),{31:[1,96]},{31:[1,97]},o($V9,[2,35]),{31:[1,98]},o($V9,[2,37]),{31:[1,99]},{41:[1,100]},{31:[1,101]},{31:[2,49],54:102,55:[1,103],56:[1,104]},{17:78,18:79,26:$Vp,28:$Vq,48:77,53:105,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{55:[1,106],56:[1,107],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,113]},o($Vu,[2,92]),o($Vu,[2,93]),o($Vu,[2,94]),{26:[1,114]},o([30,31,55,56,67,72,73,74,75,76,79,81,82,83,84,85,86,87],$Vv),{31:[1,115]},{67:[1,116]},o($V9,[2,41]),{45:$Vs,46:117,47:$Vt},o($V9,[2,43]),o($Vm,[2,101],{28:[1,118]}),{79:[1,119]},o($Vm,[2,104]),{16:[1,120]},{17:63,18:64,29:121,31:$Vo,89:$V6,91:$V7,92:$V8},o($V9,[2,27]),{17:63,18:64,29:122,31:$Vo,89:$V6,91:$V7,92:$V8},o($V9,[2,28]),o($V9,[2,31]),o($V9,[2,32]),o($V9,[2,36]),o($V9,[2,38]),{17:78,18:79,26:$Vp,42:123,48:124,49:125,50:126,51:127,68:$Vw,73:$Vr,77:[1,129],88:80,89:$V6,91:$V7,92:$V8},{4:131,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$Vx,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,58:130,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,28:$Vq,48:77,52:133,53:75,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},o($Vy,[2,50]),o($Vy,[2,51]),{31:[1,134]},{17:78,18:79,26:$Vp,48:135,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:136,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:137,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:138,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:139,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:140,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:141,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:142,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},o($Vu,[2,95]),{4:144,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$Vz,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,66:143,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:146,49:147,68:$Vw,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},o($V9,[2,42]),{17:78,18:79,26:$VA,48:149,69:148,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},o($Vm,[2,106]),{79:[1,151]},o($V9,[2,25]),o($V9,[2,26]),{31:[1,152]},{31:[2,44],71:153,72:[1,154],73:[1,155],74:[1,156],75:[1,157],76:[1,158]},{31:[2,45]},{31:[2,46]},{31:[2,47]},{17:78,18:79,26:$VA,48:149,69:159,70:[1,160],73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:163,73:$Vr,78:161,80:162,88:80,89:$V6,91:$V7,92:$V8},o($V9,[2,52]),{4:131,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$Vx,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,58:164,89:$V6,91:$V7,92:$V8},{16:$Va,27:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,38:$Vg,40:$Vh,43:$Vi,57:$Vj,59:[1,165],61:[1,166],63:[1,167],64:$Vk},{31:[2,48]},o($VB,[2,83]),o($VB,[2,84]),o($VB,[2,85]),o($VB,[2,86]),o($VB,[2,87]),o($VB,[2,88]),o($VB,[2,89]),o($VB,[2,90]),o($VB,[2,91]),o($V9,[2,63]),{4:144,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$Vz,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,66:168,89:$V6,91:$V7,92:$V8},{16:$Va,27:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,38:$Vg,40:$Vh,43:$Vi,57:$Vj,63:[1,169],64:$Vk},{31:[2,66]},{31:[2,67]},{31:[1,170]},o($VC,[2,72],{30:[1,171]}),o([30,31,70],$Vv,{25:[1,172]}),o($Vm,[2,105]),o($V9,[2,39]),{17:78,18:79,26:$Vp,48:173,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($VD,[2,78]),{70:[1,174]},{31:[2,69]},{79:[1,175]},{30:[1,176],79:[2,81]},{81:[1,177]},o($V9,[2,53]),{28:[1,178]},{4:180,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$VE,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,62:179,89:$V6,91:$V7,92:$V8},o($V9,[2,56]),o($V9,[2,64]),o($V9,[2,65]),o($Vm,[2,102]),{17:78,18:79,26:$VA,48:149,69:182,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{25:[1,183]},{31:[2,73]},{31:[2,68]},{31:[2,79]},{17:78,18:79,26:$Vp,48:163,73:$Vr,78:184,80:162,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,48:185,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},{17:78,18:79,26:$Vp,28:$Vq,48:77,52:186,53:75,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},o($V9,[2,55]),{4:180,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$VE,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,62:187,89:$V6,91:$V7,92:$V8},{16:$Va,27:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,38:$Vg,40:$Vh,43:$Vi,57:$Vj,63:[1,188],64:$Vk},o($VC,[2,70]),{26:[1,189]},{79:[2,80]},o([30,79],[2,82]),{31:[1,190]},o($V9,[2,61]),o($V9,[2,62]),o($VC,[2,71]),{4:192,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$VF,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,60:191,89:$V6,91:$V7,92:$V8},o($V9,[2,54]),{4:192,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$VF,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,60:194,89:$V6,91:$V7,92:$V8},{16:$Va,27:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,38:$Vg,40:$Vh,43:$Vi,57:$Vj,59:[1,195],61:[1,196],63:[1,197],64:$Vk},o($V9,[2,57]),{28:[1,198]},{4:180,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$VE,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,62:199,89:$V6,91:$V7,92:$V8},o($V9,[2,60]),{17:78,18:79,26:$Vp,28:$Vq,48:77,52:200,53:75,73:$Vr,88:80,89:$V6,91:$V7,92:$V8},o($V9,[2,59]),{31:[1,201]},{4:192,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$VF,16:$V2,17:14,18:15,19:16,20:17,21:19,22:20,23:$V3,24:$V4,26:$V5,60:202,89:$V6,91:$V7,92:$V8},o($V9,[2,58])],
defaultActions: {3:[2,2],27:[2,1],125:[2,45],126:[2,46],127:[2,47],133:[2,48],146:[2,66],147:[2,67],160:[2,69],173:[2,73],174:[2,68],175:[2,79],184:[2,80]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/*  Simple Attempt at a symbol table, still rudimentary though
 */
var symTable = new Map(); 
var parCount = 0;
var codeLine = new String("");

function addVariable(symbol) {
    if (symTable.get(symbol) == null) {
        symTable.set(symbol, "UNASSIGNED");
    }
}

function addString(ConstString) {
    symTable.set(ConstString, "STRING    ");
}

function addNumber(number) {
    symTable.set(number, "NUMBER    ");
}

function addFile(file) {
    symTable.set(file, "FILE             ");
}

function handleAssignment(symbol, values) {
    // if value is not defined yet then we are assigning undefined to symbol
    // by virtue of that symbol also is undefined
    var allAssigned = true;
    
    if (Array.isArray(values)) {
        for (vIndex in values) {
            var curVal = symTable.get(values[vIndex]);
            if (curVal == null) {
                allAssigned = false;
                break;
            } else if ( curVal == "UNASSIGNED") {
                allAssigned = false;
                break;
            }
        }
    } else {
        var curVal = symTable.get(values);
        if (curVal == null) {
            allAssigned = false;
        } else if ( curVal == "UNASSIGNED") {
            allAssigned = false;
        }
    }
    // Mark symbol as assigned value
    if (allAssigned) {
        symTable.set(symbol, "ASSIGNED  ");
    }
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
					/* skip newlines */
					//console.log(yy_.yylineno + ": " + codeLine);
					codeLine = "";
				
break;
case 1:
					/* skip whitespaces */
                                        if (this.topState() == "INITIAL") {
                                                codeLine += yy_.yytext;
                                        }
				
break;
case 2: 
					this.begin("SWITCH"); 
					return 15 
				
break;
case 3:
					if (this.topState() == "INITIAL") {
						codeLine += " " + yy_.yytext;
					}
					return 92 
				
break;
case 4: 
					this.begin("INSTRING"); 
					return 89
				
break;
case 5: 
					this.begin("INSTRING"); 
					return 91
				
break;
case 6: 
					this.popState(); 
					this.begin("SL_COMMENT"); 
					return 43 
				
break;
case 7: 
					this.popState(); 
					this.begin("ML_COMMENT"); 
					return 43 
				
break;
case 8: 
					this.popState(); 
					return 44
				
break;
case 9: 
					return 45 
				
break;
case 10: 
					this.popState(); 
					return 47
				
break;
case 11: 
					//console.log(yy_.yylineno + ": " + codeLine);
					codeLine = "";
					this.popState(); 
					this.begin("VELOCITY"); 
					return 40
			        
break;
case 12: 
					//console.log(yy_.yylineno + ": " + codeLine +"\n");
					codeLine = "";
					this.popState(); 
					this.begin("VELOCITY"); 
					return 57
				
break;
case 13: 
					//console.log(yy_.yylineno + ": " + codeLine);
					codeLine = "";
					this.popState(); 
					this.begin("VELOCITY"); 
					return 59 
				
break;
case 14: 
					//console.log(yy_.yylineno + ": " + codeLine);
					codeLine = "";
					this.popState(); 
					return 61 
				
break;
case 15: 
					//console.log(yy_.yylineno + ": " + codeLine +"\n");
					codeLine = "";
					this.popState(); 
					return 63 
				
break;
case 16: 
					//console.log(yy_.yylineno + ": " + codeLine);
					codeLine = "";
					this.popState(); 
					this.begin("VELOCITY"); 
					return 64 
				
break;
case 17: 
					this.popState(); 
					this.begin("VELOCITY"); 
					return 32 
				
break;
case 18: 
					this.popState(); 
					return 34 
				
break;
case 19: 
					this.popState(); 
					return 35 
				
break;
case 20: 
					this.popState(); 
					this.begin("VELOCITY"); 
					return 27 
				
break;
case 21: 
					this.popState(); 
					this.begin("VELOCITY"); 
					return 36 
				
break;
case 22: 
					this.popState(); 
					this.begin("VELOCITY"); 
					return 38 
				
break;
case 23:return 25
break;
case 24:
					if (this.topState() == "INITIAL") {
						codeLine += yy_.yytext;
					}
					return 26
				
break;
case 25: 
					this.popState(); 
					return 91
				
break;
case 26: 
					this.popState(); 
					return 89
				
break;
case 27:return 90
break;
case 28:return 67
break;
case 29:return 55
break;
case 30:return 82
break;
case 31:return 83
break;
case 32:return 85
break;
case 33:return 84
break;
case 34:return 86
break;
case 35:return 87
break;
case 36:return 56
break;
case 37: 
					if (this.topState() == "SWITCH")  {
						codeLine += "#" + yy_.yytext;
						this.popState(); 
					} else if (this.topState() == "INITIAL")  {
						codeLine +=  yy_.yytext;
					}
					return 16 
			        
break;
case 38:
                                        if (this.topState() == "INITIAL") {
                                                codeLine += yy_.yytext;
                                        }
					return 23;
				
break;
case 39:return 72
break;
case 40:return 73
break;
case 41:return 74
break;
case 42:return 75
break;
case 43:return 76
break;
case 44:return 55
break;
case 45:return 56
break;
case 46:return 82
break;
case 47:return 83
break;
case 48:return 84
break;
case 49:return 85
break;
case 50:return 86
break;
case 51:return 87
break;
case 52:return 41
break;
case 53:return 81
break;
case 54:return 24
break;
case 55:return 68
break;
case 56:return 70
break;
case 57:return 77
break;
case 58:return 79
break;
case 59: parCount = parCount + 1;  return 28 
break;
case 60: parCount = parCount - 1; if (parCount == 0) this.popState(); return 31 
break;
case 61:return 30
break;
case 62: return 5 
break;
case 63:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(\n))/,/^(?:(\s)+)/,/^(?:#)/,/^(?:\$)/,/^(?:')/,/^(?:")/,/^(?:#)/,/^(?:\*\*)/,/^(?:((([a-zA-Z])|([0-9])|([!%$&+,-\/:;<=>?@[\]^_`|()~.])|(\s))*))/,/^(?:((([a-zA-Z])|([0-9])|([!%$&+,-\/:;<=>?@[\]^_`|()~.])|(\s))*))/,/^(?:\*#)/,/^(?:set)/,/^(?:if)/,/^(?:elseif)/,/^(?:else)/,/^(?:end)/,/^(?:foreach)/,/^(?:parse)/,/^(?:break)/,/^(?:stop)/,/^(?:include)/,/^(?:evaluate)/,/^(?:define)/,/^(?:\.)/,/^(?:([0-9])+)/,/^(?:")/,/^(?:')/,/^(?:((([a-zA-Z])|([0-9])|([!%$&+,-\/:;<=>?@[\]^_`|()~.])|(\s))*))/,/^(?:in)/,/^(?:and)/,/^(?:eq)/,/^(?:ne)/,/^(?:lt)/,/^(?:gt)/,/^(?:gte)/,/^(?:lte)/,/^(?:or)/,/^(?:([a-zA-Z])((([a-zA-Z\_\-])|([0-9]))*)?)/,/^(?:([%*&+,-\/:;<=>?@[\]^_`|()~.]))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?::)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,23,24,37,38,43,54,55,56,57,58,59,60,62,63],"inclusive":true},"INSTRING":{"rules":[25,26,27],"inclusive":false},"SWITCH":{"rules":[0,1,6,7,11,12,13,14,15,16,17,18,19,20,21,22,24,37,62],"inclusive":false},"VELOCITY":{"rules":[0,1,3,4,5,23,24,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":false},"SL_COMMENT":{"rules":[8],"inclusive":false},"ML_COMMENT":{"rules":[0,9,10],"inclusive":false}}
});
/*Language Grammar*/;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = velocity;
exports.Parser = velocity.Parser;
exports.parse = function () { return velocity.parse.apply(velocity, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}