/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var velocity = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,19],$V2=[1,22],$V3=[1,18],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,33],$Vi=[1,69],$Vj=[5,20,23,24,25,26,27,28,29,30,31,32,33,34,35,86,88,89],$Vk=[5,20,23,24,25,26,27,28,29,30,31,32,33,34,35,40,50,64,65,72,75,78,81,83,84,85,86,88,89],$Vl=[5,20,23,24,25,26,27,28,29,30,31,32,33,34,35,40,64,65,72,75,78,81,83,84,85,86,88,89],$Vm=[1,77],$Vn=[1,93],$Vo=[1,94],$Vp=[1,88],$Vq=[1,99],$Vr=[1,100],$Vs=[25,26,27,28,30,31,32,33,34,40,64,65,72,75,78,81,83,84,85],$Vt=[2,95],$Vu=[25,26,27,28,30,31,32,33,34,36,40,64,65,72,75,78,81,83,84,85],$Vv=[1,142],$Vw=[27,35,38,86,88,89],$Vx=[40,64,65],$Vy=[40,75],$Vz=[27,35,86,88,89];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"statements":3,"statement":4,"EOF":5,"include_statement":6,"parse_statement":7,"break_statement":8,"stop_statement":9,"eval_statement":10,"define_statement":11,"set_statement":12,"if_statement":13,"if_part_stmts":14,"foreach_statement":15,"code_statement":16,"var":17,"single_comment":18,"multiline_comment":19,"ID":20,"numeric_dotted":21,"string_stmt":22,"EXCLAIM":23,"HASH":24,"DIV":25,"ADD":26,"SUBTRACT":27,"COLON":28,"BACKSLASH":29,"LESSTHAN":30,"GREATERTHAN":31,"EQUALTO":32,"MUL":33,"COMMA":34,"NUMBER":35,"PERIOD":36,"INCLUDE":37,"LPAR":38,"include_tokens":39,"RPAR":40,"PARSE":41,"parse_tokens":42,"BREAK":43,"STOP":44,"EVALUATE":45,"eval_tokens":46,"DEFINE":47,"define_tokens":48,"SET":49,"ASSIGN":50,"arg_statement":51,"COMMENT_START":52,"SL_COMMENT":53,"ML_COMMENT":54,"ml_comment_line":55,"EOC":56,"object":57,"object_list_statement":58,"math_stmt":59,"map_stmt":60,"bool_statements":61,"bool_stmt":62,"logical_operator":63,"AND":64,"OR":65,"IF":66,"ELSEIF":67,"ELSE":68,"END":69,"FOREACH":70,"foreach_condition":71,"IN":72,"LSQUARE":73,"list_contents":74,"RSQUARE":75,"number_clause":76,"math_operator":77,"IDIV":78,"LCURLY":79,"key_value_stmts":80,"RCURLY":81,"key_value":82,"NOTEQUAL":83,"GREATERTHANEQUAL":84,"LESSTHANEQUAL":85,"SINGLEQUOTE":86,"STRING":87,"DOUBLEQUOTE":88,"VARBEGIN":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"ID",23:"EXCLAIM",24:"HASH",25:"DIV",26:"ADD",27:"SUBTRACT",28:"COLON",29:"BACKSLASH",30:"LESSTHAN",31:"GREATERTHAN",32:"EQUALTO",33:"MUL",34:"COMMA",35:"NUMBER",36:"PERIOD",37:"INCLUDE",38:"LPAR",40:"RPAR",41:"PARSE",43:"BREAK",44:"STOP",45:"EVALUATE",47:"DEFINE",49:"SET",50:"ASSIGN",52:"COMMENT_START",53:"SL_COMMENT",54:"ML_COMMENT",56:"EOC",64:"AND",65:"OR",66:"IF",67:"ELSEIF",68:"ELSE",69:"END",70:"FOREACH",72:"IN",73:"LSQUARE",75:"RSQUARE",78:"IDIV",79:"LCURLY",81:"RCURLY",83:"NOTEQUAL",84:"GREATERTHANEQUAL",85:"LESSTHANEQUAL",86:"SINGLEQUOTE",87:"STRING",88:"DOUBLEQUOTE",89:"VARBEGIN"},
productions_: [0,[3,2],[3,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[21,2],[21,1],[6,4],[39,3],[39,2],[39,3],[39,2],[39,1],[7,4],[42,2],[42,2],[8,2],[9,2],[10,4],[46,2],[11,4],[48,2],[12,7],[18,3],[19,4],[55,2],[55,1],[51,1],[51,1],[51,1],[51,1],[61,3],[61,1],[63,1],[63,1],[13,5],[14,5],[14,2],[14,2],[15,7],[71,3],[71,3],[58,3],[58,2],[74,3],[74,4],[74,1],[59,3],[77,1],[77,1],[77,1],[77,1],[77,1],[60,3],[80,3],[80,1],[82,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[57,1],[57,1],[57,1],[76,2],[76,1],[22,3],[22,3],[22,2],[17,2],[17,4],[17,7],[17,3],[17,4],[17,6],[17,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:

            return symTable; 
        
break;
case 3:

            console.log("include statement");
        
break;
case 34:

            console.log("include statement ");
        
break;
case 40:

            console.log("Parse Statement");
        
break;
case 43:

            console.log("Break Statement");
        
break;
case 44:

            console.log("STOP Statement");
        
break;
case 45:

            console.log("Eval Statement");
        
break;
case 47:

            console.log("Define Statement");
        
break;
case 49:

            this.$ = $$[$0-3] + '=' + $$[$0-1];
            handleAssignment($$[$0-3], $$[$0-1]);
        
break;
case 50:

	    console.log("Single-line comment" + $$[$0]);
        
break;
case 51:

	    console.log("Grammar: Muliline comment start" + $$[$0-1]);
        
break;
case 52:

	    console.log("Muliline comment" + $$[$0-1]);
        
break;
case 55:
 
            var myListInStr = this.$;
            this.$ = myListInStr.substring(1,myListInStr.length-1).split(",");
            
        
break;
case 62:

		console.log("IF Statement");
	
break;
case 63:

		console.log("ELSEIF Statement");
	
break;
case 64:

		console.log("ELSE Statement");
	
break;
case 65:

		console.log("END Statement");
	
break;
case 66:

            console.log("foreach loop");
        
break;
case 67: case 68:

            addVariable($$[$0-2]);
            addVariable($$[$0]);
            handleAssignment($$[$0-2], $$[$0]);
        
break;
case 69:

            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
            // Individual elements of the list would have been added so no need to add again
	       // To Be Removed
            //addVariable(this.$);
        
break;
case 70:

            this.$ = $$[$0-1] + $$[$0];
	    // Looks like an empty statement or null list
	    // To Be Removed
            //addVariable(this.$);
        
break;
case 71:

            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
            //Adding list content
        
break;
case 72:

            this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] +$$[$0];
            //Adding list content
        
break;
case 73:

            //addVariable($$[$0]); 
        
break;
case 74:

            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
	   
break;
case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92:

            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
        
break;
case 95:
 
            addNumber($$[$0]); 
        
break;
case 96:

		this.$ = $$[$0-1] + $$[$0];
         
break;
case 98: case 99:

            this.$ = $$[$0-1];
            addString($$[$0-1]);
        
break;
case 100:

            this.$ = $$[$0-1] + $$[$0];
            addString(this.$);
        
break;
case 101:

            this.$ = $$[$0-1] + $$[$0];
            addVariable(this.$);
        
break;
case 102:

            this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
            addVariable(this.$);
        
break;
case 103:

            this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3];
            addVariable(this.$);
        
break;
case 104:

            this.$ = $$[$0-2] + $$[$0];
            addVariable(this.$);
        
break;
case 105:

            this.$ = $$[$0-3] + $$[$0-1];
            addVariable(this.$);
        
break;
case 106:

            this.$ = $$[$0-5] + $$[$0-3] + $$[$0-2] + $$[$0-1];
            addVariable(this.$);
        
break;
case 107:

            this.$ = $$[$0-4] + $$[$0-1];
            addVariable(this.$);
        
break;
}
},
table: [{3:1,4:2,5:$V0,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:20,22:21,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,86:$Vf,88:$Vg,89:$Vh},{1:[3]},{3:37,4:2,5:$V0,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:20,22:21,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,86:$Vf,88:$Vg,89:$Vh},o($Vi,[2,2]),o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,21],{37:[1,38],41:[1,39],43:[1,40],44:[1,41],45:[1,42],47:[1,43],49:[1,44],52:[1,50],66:[1,45],67:[1,46],68:[1,47],69:[1,48],70:[1,49]}),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),o($Vj,[2,27]),o($Vj,[2,28]),o($Vj,[2,29]),o($Vj,[2,30]),o($Vj,[2,31]),{20:[1,51],23:[1,52],79:[1,53]},o($Vj,[2,33],{36:[1,54]}),{87:[1,55]},{87:[1,56],88:[1,57]},o($Vi,[2,1]),{38:[1,58]},{38:[1,59]},o($Vj,[2,43]),o($Vj,[2,44]),{38:[1,60]},{38:[1,61]},{38:[1,62]},{38:[1,63]},{38:[1,64]},o($Vj,[2,64]),o($Vj,[2,65]),{38:[1,65]},{53:[1,66],54:[1,67]},o($Vk,[2,101],{36:[1,68]}),{20:$Vi,79:[1,70]},{20:[1,71]},o($Vj,[2,32]),{86:[1,72]},{88:[1,73]},o($Vl,[2,100]),{17:75,22:76,39:74,40:$Vm,86:$Vf,88:$Vg,89:$Vh},{17:79,22:80,42:78,86:$Vf,88:$Vg,89:$Vh},{17:82,46:81,89:$Vh},{17:84,48:83,89:$Vh},{17:85,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,38:$Vp,57:89,61:86,62:87,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,38:$Vp,57:89,61:95,62:87,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:97,71:96,76:92,86:$Vf,88:$Vg,89:$Vh},o($Vj,[2,50]),{54:$Vq,55:98,56:$Vr},{20:[1,101]},o($Vk,[2,104]),{20:[1,102]},{36:[1,104],81:[1,103]},o($Vl,[2,98]),o($Vl,[2,99]),o($Vj,[2,34]),{34:[1,105],40:[1,106]},{34:[1,107],40:[1,108]},o($Vj,[2,39]),o($Vj,[2,40]),{40:[1,109]},{40:[1,110]},o($Vj,[2,45]),{40:[1,111]},o($Vj,[2,47]),{40:[1,112]},{50:[1,113]},{40:[1,114]},{40:[2,59],63:115,64:[1,116],65:[1,117]},{17:90,22:91,27:$Vn,35:$Vo,38:$Vp,57:89,62:118,76:92,86:$Vf,88:$Vg,89:$Vh},{30:[1,124],31:[1,123],32:[1,121],64:[1,119],65:[1,120],83:[1,122],84:[1,125],85:[1,126]},o($Vs,[2,93]),o($Vs,[2,94]),o([25,26,27,28,30,31,32,33,34,40,64,65,72,78,81,83,84,85],$Vt),{35:[1,127]},o($Vu,[2,97]),{40:[1,128]},{40:[1,129]},{72:[1,130]},o($Vj,[2,51]),{54:$Vq,55:131,56:$Vr},o($Vj,[2,53]),o($Vk,[2,102],{38:[1,132]}),{81:[1,133]},o($Vk,[2,105]),{20:[1,134]},{17:75,22:76,39:135,40:$Vm,86:$Vf,88:$Vg,89:$Vh},o($Vj,[2,36]),{17:75,22:76,39:136,40:$Vm,86:$Vf,88:$Vg,89:$Vh},o($Vj,[2,38]),o($Vj,[2,41]),o($Vj,[2,42]),o($Vj,[2,46]),o($Vj,[2,48]),{17:90,22:91,27:$Vn,35:$Vo,51:137,57:138,58:139,59:140,60:141,73:$Vv,76:92,79:[1,143],86:$Vf,88:$Vg,89:$Vh},o($Vj,[2,62]),{17:90,22:91,27:$Vn,35:$Vo,38:$Vp,57:89,61:144,62:87,76:92,86:$Vf,88:$Vg,89:$Vh},o($Vw,[2,60]),o($Vw,[2,61]),{40:[1,145]},{17:90,22:91,27:$Vn,35:$Vo,57:146,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:147,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:148,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:149,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:150,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:151,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:152,76:92,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:153,76:92,86:$Vf,88:$Vg,89:$Vh},o($Vu,[2,96]),o($Vj,[2,63]),{3:154,4:2,5:$V0,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:20,22:21,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,34:$Vd,35:$Ve,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:155,58:156,73:$Vv,76:92,86:$Vf,88:$Vg,89:$Vh},o($Vj,[2,52]),{17:90,22:91,27:$Vn,35:$Vo,57:158,74:157,76:159,86:$Vf,88:$Vg,89:$Vh},o($Vk,[2,107]),{81:[1,160]},o($Vj,[2,35]),o($Vj,[2,37]),{40:[1,161]},{25:[1,166],26:[1,163],27:[1,164],33:[1,165],40:[2,54],77:162,78:[1,167]},{40:[2,55]},{40:[2,56]},{40:[2,57]},{17:90,22:91,27:$Vn,35:$Vo,57:158,74:168,75:[1,169],76:159,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:172,76:92,80:170,82:171,86:$Vf,88:$Vg,89:$Vh},{40:[2,58]},o($Vx,[2,84]),o($Vx,[2,85]),o($Vx,[2,86]),o($Vx,[2,87]),o($Vx,[2,88]),o($Vx,[2,89]),o($Vx,[2,90]),o($Vx,[2,91]),o($Vx,[2,92]),{69:[1,173]},{40:[2,67]},{40:[2,68]},{40:[1,174]},o($Vy,[2,73],{34:[1,175]}),o([34,40,75],$Vt,{36:[1,176]}),o($Vk,[2,106]),o($Vj,[2,49]),{17:90,22:91,27:$Vn,35:$Vo,57:177,76:92,86:$Vf,88:$Vg,89:$Vh},o($Vz,[2,75]),o($Vz,[2,76]),o($Vz,[2,77]),o($Vz,[2,78]),o($Vz,[2,79]),{75:[1,178]},{40:[2,70]},{81:[1,179]},{34:[1,180],81:[2,82]},{28:[1,181]},o($Vj,[2,66]),o($Vk,[2,103]),{17:90,22:91,27:$Vn,35:$Vo,57:158,74:182,76:159,86:$Vf,88:$Vg,89:$Vh},{36:[1,183]},{40:[2,74]},{40:[2,69]},{40:[2,80]},{17:90,22:91,27:$Vn,35:$Vo,57:172,76:92,80:184,82:171,86:$Vf,88:$Vg,89:$Vh},{17:90,22:91,27:$Vn,35:$Vo,57:185,76:92,86:$Vf,88:$Vg,89:$Vh},o($Vy,[2,71]),{27:$Vn,35:$Vo,76:186},{81:[2,81]},o([34,81],[2,83]),o($Vy,[2,72])],
defaultActions: {139:[2,55],140:[2,56],141:[2,57],144:[2,58],155:[2,67],156:[2,68],169:[2,70],177:[2,74],178:[2,69],179:[2,80],184:[2,81]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/*  Simple Attempt at a symbol table, still rudimentary though, ultimate goal
    is to be able to generate a proper syntax tree here
 */
var symTable = new Map(); 

function addVariable(symbol) {
    if (symTable.get(symbol) == null) {
        symTable.set(symbol, "UNASSIGNED");
    }
}

function addString(ConstString) {
    symTable.set(ConstString, "STRING    ");
}

function addNumber(number) {
    symTable.set(number, "NUMBER    ");
}

function addFile(file) {
    symTable.set(file, "FILE             ");
}

function handleAssignment(symbol, values) {
    // if value is not defined yet then we are assigning undefined to symbol
    // by virtue of that symbol also is undefined
    var allAssigned = true;
    
    if (Array.isArray(values)) {
        for (vIndex in values) {
            var curVal = symTable.get(values[vIndex]);
            if (curVal == null) {
                //console.log("var being assigned undefined variable");
                allAssigned = false;
                break;
            } else if ( curVal == "UNASSIGNED") {
                allAssigned = false;
                //console.log("var being assigned to another var with no value");
                break;
            }
        }
    } else {
        var curVal = symTable.get(values);
        if (curVal == null) {
            allAssigned = false;
        } else if ( curVal == "UNASSIGNED") {
            allAssigned = false;
        }
    }
    // Mark symbol as assigned value
    if (allAssigned) {
        symTable.set(symbol, "ASSIGNED  ");
    }
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip newlines */
break;
case 1:/* skip whitespaces */
break;
case 2: this.begin("SWITCH"); return 24 
break;
case 3: return 89 
break;
case 4: this.begin("INSTRING"); return 86
break;
case 5: this.begin("INSTRING"); return 88
break;
case 6: this.popState(); this.begin("SL_COMMENT"); console.log("Single Line Comment"); return 52 
break;
case 7: this.popState(); this.begin("ML_COMMENT"); console.log("Multi-line Comment"); return 52 
break;
case 8: console.log("End of Comment"); this.popState(); return 53
break;
case 9: console.log("Read a line"); return 54 
break;
case 10: console.log("New Line in multi-line comment"); 
break;
case 11: this.popState(); console.log("End of multiline comment"); return 56
break;
case 12: this.popState(); return 49
break;
case 13: this.popState(); return 66
break;
case 14: this.popState(); return 67 
break;
case 15: this.popState(); return 68 
break;
case 16: this.popState(); return 69 
break;
case 17: this.popState(); return 70 
break;
case 18: this.popState(); return 41 
break;
case 19: this.popState(); return 43 
break;
case 20: this.popState(); return 44 
break;
case 21: this.popState(); return 37 
break;
case 22: this.popState(); return 45 
break;
case 23: this.popState(); return 47 
break;
case 24:return 36
break;
case 25:return 23
break;
case 26:return 73
break;
case 27:return 75
break;
case 28:return 79
break;
case 29:return 81
break;
case 30:return 38
break;
case 31:return 40
break;
case 32: console.log("Got a number"); return 35 
break;
case 33: this.popState(); return 88
break;
case 34: this.popState(); return 86
break;
case 35:return 87
break;
case 36:return 72
break;
case 37:return 64
break;
case 38:return 32
break;
case 39:return 83
break;
case 40:return 30
break;
case 41:return 31
break;
case 42:return 84
break;
case 43:return 85
break;
case 44:return 65
break;
case 45: this.popState(); return 20 
break;
case 46:return 26
break;
case 47:return 27
break;
case 48:return 33
break;
case 49:return 25
break;
case 50:return 78
break;
case 51:return 64
break;
case 52:return 65
break;
case 53:return 32
break;
case 54:return 83
break;
case 55:return 31
break;
case 56:return 30
break;
case 57:return 84
break;
case 58:return 85
break;
case 59:return 50
break;
case 60:return 28
break;
case 61:return 23
break;
case 62:return 73
break;
case 63:return 75
break;
case 64:return 79
break;
case 65:return 81
break;
case 66:return 38
break;
case 67:return 40
break;
case 68:return 34
break;
case 69:return 5
break;
case 70:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(\n)+)/,/^(?:(\s)+)/,/^(?:#)/,/^(?:\$)/,/^(?:')/,/^(?:")/,/^(?:#)/,/^(?:\*\*)/,/^(?:((([a-zA-Z])|([0-9])|([!%$&+,-\/:;<=>?@[\]^_`|(){}~.])|(\s))*))/,/^(?:((([a-zA-Z])|([0-9])|([!%$&+,-\/:;<=>?@[\]^_`|(){}~.])|(\s))*))/,/^(?:(\n))/,/^(?:\*#)/,/^(?:set)/,/^(?:if)/,/^(?:elseif)/,/^(?:else)/,/^(?:end)/,/^(?:foreach)/,/^(?:parse)/,/^(?:break)/,/^(?:stop)/,/^(?:include)/,/^(?:evaluate)/,/^(?:define)/,/^(?:\.)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:([0-9])+)/,/^(?:")/,/^(?:')/,/^(?:((([a-zA-Z])|([0-9])|([!%$&+,-\/:;<=>?@[\]^_`|(){}~.])|(\s))*))/,/^(?:in)/,/^(?:and)/,/^(?:eq)/,/^(?:ne)/,/^(?:lt)/,/^(?:gt)/,/^(?:gte)/,/^(?:lte)/,/^(?:or)/,/^(?:([a-zA-Z])((([a-zA-Z\_\-])|([0-9]))*)?)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?::)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true},"INSTRING":{"rules":[33,34,35],"inclusive":false},"SWITCH":{"rules":[6,7,12,13,14,15,16,17,18,19,20,21,22,23,45],"inclusive":false},"SL_COMMENT":{"rules":[8],"inclusive":false},"ML_COMMENT":{"rules":[9,10,11],"inclusive":false}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = velocity;
exports.Parser = velocity.Parser;
exports.parse = function () { return velocity.parse.apply(velocity, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}